package com.pae.well.web.rest;

import static org.assertj.core.api.Assertions.assertThat;
import static org.hamcrest.Matchers.hasItem;
import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.csrf;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

import com.pae.well.IntegrationTest;
import com.pae.well.domain.StateExploitation;
import com.pae.well.repository.StateExploitationRepository;
import com.pae.well.service.dto.StateExploitationDTO;
import com.pae.well.service.mapper.StateExploitationMapper;
import java.util.List;
import java.util.Random;
import java.util.concurrent.atomic.AtomicLong;
import javax.persistence.EntityManager;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.http.MediaType;
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.transaction.annotation.Transactional;

/**
 * Integration tests for the {@link StateExploitationResource} REST controller.
 */
@IntegrationTest
@AutoConfigureMockMvc
@WithMockUser
class StateExploitationResourceIT {

    private static final String DEFAULT_NAME = "AAAAAAAAAA";
    private static final String UPDATED_NAME = "BBBBBBBBBB";

    private static final String ENTITY_API_URL = "/api/state-exploitations";
    private static final String ENTITY_API_URL_ID = ENTITY_API_URL + "/{id}";

    private static Random random = new Random();
    private static AtomicLong count = new AtomicLong(random.nextInt() + (2 * Integer.MAX_VALUE));

    @Autowired
    private StateExploitationRepository stateExploitationRepository;

    @Autowired
    private StateExploitationMapper stateExploitationMapper;

    @Autowired
    private EntityManager em;

    @Autowired
    private MockMvc restStateExploitationMockMvc;

    private StateExploitation stateExploitation;

    /**
     * Create an entity for this test.
     *
     * This is a static method, as tests for other entities might also need it,
     * if they test an entity which requires the current entity.
     */
    public static StateExploitation createEntity(EntityManager em) {
        StateExploitation stateExploitation = new StateExploitation().name(DEFAULT_NAME);
        return stateExploitation;
    }

    /**
     * Create an updated entity for this test.
     *
     * This is a static method, as tests for other entities might also need it,
     * if they test an entity which requires the current entity.
     */
    public static StateExploitation createUpdatedEntity(EntityManager em) {
        StateExploitation stateExploitation = new StateExploitation().name(UPDATED_NAME);
        return stateExploitation;
    }

    @BeforeEach
    public void initTest() {
        stateExploitation = createEntity(em);
    }

    @Test
    @Transactional
    void createStateExploitation() throws Exception {
        int databaseSizeBeforeCreate = stateExploitationRepository.findAll().size();
        // Create the StateExploitation
        StateExploitationDTO stateExploitationDTO = stateExploitationMapper.toDto(stateExploitation);
        restStateExploitationMockMvc
            .perform(
                post(ENTITY_API_URL)
                    .with(csrf())
                    .contentType(MediaType.APPLICATION_JSON)
                    .content(TestUtil.convertObjectToJsonBytes(stateExploitationDTO))
            )
            .andExpect(status().isCreated());

        // Validate the StateExploitation in the database
        List<StateExploitation> stateExploitationList = stateExploitationRepository.findAll();
        assertThat(stateExploitationList).hasSize(databaseSizeBeforeCreate + 1);
        StateExploitation testStateExploitation = stateExploitationList.get(stateExploitationList.size() - 1);
        assertThat(testStateExploitation.getName()).isEqualTo(DEFAULT_NAME);
    }

    @Test
    @Transactional
    void createStateExploitationWithExistingId() throws Exception {
        // Create the StateExploitation with an existing ID
        stateExploitation.setId(1L);
        StateExploitationDTO stateExploitationDTO = stateExploitationMapper.toDto(stateExploitation);

        int databaseSizeBeforeCreate = stateExploitationRepository.findAll().size();

        // An entity with an existing ID cannot be created, so this API call must fail
        restStateExploitationMockMvc
            .perform(
                post(ENTITY_API_URL)
                    .with(csrf())
                    .contentType(MediaType.APPLICATION_JSON)
                    .content(TestUtil.convertObjectToJsonBytes(stateExploitationDTO))
            )
            .andExpect(status().isBadRequest());

        // Validate the StateExploitation in the database
        List<StateExploitation> stateExploitationList = stateExploitationRepository.findAll();
        assertThat(stateExploitationList).hasSize(databaseSizeBeforeCreate);
    }

    @Test
    @Transactional
    void checkNameIsRequired() throws Exception {
        int databaseSizeBeforeTest = stateExploitationRepository.findAll().size();
        // set the field null
        stateExploitation.setName(null);

        // Create the StateExploitation, which fails.
        StateExploitationDTO stateExploitationDTO = stateExploitationMapper.toDto(stateExploitation);

        restStateExploitationMockMvc
            .perform(
                post(ENTITY_API_URL)
                    .with(csrf())
                    .contentType(MediaType.APPLICATION_JSON)
                    .content(TestUtil.convertObjectToJsonBytes(stateExploitationDTO))
            )
            .andExpect(status().isBadRequest());

        List<StateExploitation> stateExploitationList = stateExploitationRepository.findAll();
        assertThat(stateExploitationList).hasSize(databaseSizeBeforeTest);
    }

    @Test
    @Transactional
    void getAllStateExploitations() throws Exception {
        // Initialize the database
        stateExploitationRepository.saveAndFlush(stateExploitation);

        // Get all the stateExploitationList
        restStateExploitationMockMvc
            .perform(get(ENTITY_API_URL + "?sort=id,desc"))
            .andExpect(status().isOk())
            .andExpect(content().contentType(MediaType.APPLICATION_JSON_VALUE))
            .andExpect(jsonPath("$.[*].id").value(hasItem(stateExploitation.getId().intValue())))
            .andExpect(jsonPath("$.[*].name").value(hasItem(DEFAULT_NAME)));
    }

    @Test
    @Transactional
    void getStateExploitation() throws Exception {
        // Initialize the database
        stateExploitationRepository.saveAndFlush(stateExploitation);

        // Get the stateExploitation
        restStateExploitationMockMvc
            .perform(get(ENTITY_API_URL_ID, stateExploitation.getId()))
            .andExpect(status().isOk())
            .andExpect(content().contentType(MediaType.APPLICATION_JSON_VALUE))
            .andExpect(jsonPath("$.id").value(stateExploitation.getId().intValue()))
            .andExpect(jsonPath("$.name").value(DEFAULT_NAME));
    }

    @Test
    @Transactional
    void getNonExistingStateExploitation() throws Exception {
        // Get the stateExploitation
        restStateExploitationMockMvc.perform(get(ENTITY_API_URL_ID, Long.MAX_VALUE)).andExpect(status().isNotFound());
    }

    @Test
    @Transactional
    void putNewStateExploitation() throws Exception {
        // Initialize the database
        stateExploitationRepository.saveAndFlush(stateExploitation);

        int databaseSizeBeforeUpdate = stateExploitationRepository.findAll().size();

        // Update the stateExploitation
        StateExploitation updatedStateExploitation = stateExploitationRepository.findById(stateExploitation.getId()).get();
        // Disconnect from session so that the updates on updatedStateExploitation are not directly saved in db
        em.detach(updatedStateExploitation);
        updatedStateExploitation.name(UPDATED_NAME);
        StateExploitationDTO stateExploitationDTO = stateExploitationMapper.toDto(updatedStateExploitation);

        restStateExploitationMockMvc
            .perform(
                put(ENTITY_API_URL_ID, stateExploitationDTO.getId())
                    .with(csrf())
                    .contentType(MediaType.APPLICATION_JSON)
                    .content(TestUtil.convertObjectToJsonBytes(stateExploitationDTO))
            )
            .andExpect(status().isOk());

        // Validate the StateExploitation in the database
        List<StateExploitation> stateExploitationList = stateExploitationRepository.findAll();
        assertThat(stateExploitationList).hasSize(databaseSizeBeforeUpdate);
        StateExploitation testStateExploitation = stateExploitationList.get(stateExploitationList.size() - 1);
        assertThat(testStateExploitation.getName()).isEqualTo(UPDATED_NAME);
    }

    @Test
    @Transactional
    void putNonExistingStateExploitation() throws Exception {
        int databaseSizeBeforeUpdate = stateExploitationRepository.findAll().size();
        stateExploitation.setId(count.incrementAndGet());

        // Create the StateExploitation
        StateExploitationDTO stateExploitationDTO = stateExploitationMapper.toDto(stateExploitation);

        // If the entity doesn't have an ID, it will throw BadRequestAlertException
        restStateExploitationMockMvc
            .perform(
                put(ENTITY_API_URL_ID, stateExploitationDTO.getId())
                    .with(csrf())
                    .contentType(MediaType.APPLICATION_JSON)
                    .content(TestUtil.convertObjectToJsonBytes(stateExploitationDTO))
            )
            .andExpect(status().isBadRequest());

        // Validate the StateExploitation in the database
        List<StateExploitation> stateExploitationList = stateExploitationRepository.findAll();
        assertThat(stateExploitationList).hasSize(databaseSizeBeforeUpdate);
    }

    @Test
    @Transactional
    void putWithIdMismatchStateExploitation() throws Exception {
        int databaseSizeBeforeUpdate = stateExploitationRepository.findAll().size();
        stateExploitation.setId(count.incrementAndGet());

        // Create the StateExploitation
        StateExploitationDTO stateExploitationDTO = stateExploitationMapper.toDto(stateExploitation);

        // If url ID doesn't match entity ID, it will throw BadRequestAlertException
        restStateExploitationMockMvc
            .perform(
                put(ENTITY_API_URL_ID, count.incrementAndGet())
                    .with(csrf())
                    .contentType(MediaType.APPLICATION_JSON)
                    .content(TestUtil.convertObjectToJsonBytes(stateExploitationDTO))
            )
            .andExpect(status().isBadRequest());

        // Validate the StateExploitation in the database
        List<StateExploitation> stateExploitationList = stateExploitationRepository.findAll();
        assertThat(stateExploitationList).hasSize(databaseSizeBeforeUpdate);
    }

    @Test
    @Transactional
    void putWithMissingIdPathParamStateExploitation() throws Exception {
        int databaseSizeBeforeUpdate = stateExploitationRepository.findAll().size();
        stateExploitation.setId(count.incrementAndGet());

        // Create the StateExploitation
        StateExploitationDTO stateExploitationDTO = stateExploitationMapper.toDto(stateExploitation);

        // If url ID doesn't match entity ID, it will throw BadRequestAlertException
        restStateExploitationMockMvc
            .perform(
                put(ENTITY_API_URL)
                    .with(csrf())
                    .contentType(MediaType.APPLICATION_JSON)
                    .content(TestUtil.convertObjectToJsonBytes(stateExploitationDTO))
            )
            .andExpect(status().isMethodNotAllowed());

        // Validate the StateExploitation in the database
        List<StateExploitation> stateExploitationList = stateExploitationRepository.findAll();
        assertThat(stateExploitationList).hasSize(databaseSizeBeforeUpdate);
    }

    @Test
    @Transactional
    void partialUpdateStateExploitationWithPatch() throws Exception {
        // Initialize the database
        stateExploitationRepository.saveAndFlush(stateExploitation);

        int databaseSizeBeforeUpdate = stateExploitationRepository.findAll().size();

        // Update the stateExploitation using partial update
        StateExploitation partialUpdatedStateExploitation = new StateExploitation();
        partialUpdatedStateExploitation.setId(stateExploitation.getId());

        partialUpdatedStateExploitation.name(UPDATED_NAME);

        restStateExploitationMockMvc
            .perform(
                patch(ENTITY_API_URL_ID, partialUpdatedStateExploitation.getId())
                    .with(csrf())
                    .contentType("application/merge-patch+json")
                    .content(TestUtil.convertObjectToJsonBytes(partialUpdatedStateExploitation))
            )
            .andExpect(status().isOk());

        // Validate the StateExploitation in the database
        List<StateExploitation> stateExploitationList = stateExploitationRepository.findAll();
        assertThat(stateExploitationList).hasSize(databaseSizeBeforeUpdate);
        StateExploitation testStateExploitation = stateExploitationList.get(stateExploitationList.size() - 1);
        assertThat(testStateExploitation.getName()).isEqualTo(UPDATED_NAME);
    }

    @Test
    @Transactional
    void fullUpdateStateExploitationWithPatch() throws Exception {
        // Initialize the database
        stateExploitationRepository.saveAndFlush(stateExploitation);

        int databaseSizeBeforeUpdate = stateExploitationRepository.findAll().size();

        // Update the stateExploitation using partial update
        StateExploitation partialUpdatedStateExploitation = new StateExploitation();
        partialUpdatedStateExploitation.setId(stateExploitation.getId());

        partialUpdatedStateExploitation.name(UPDATED_NAME);

        restStateExploitationMockMvc
            .perform(
                patch(ENTITY_API_URL_ID, partialUpdatedStateExploitation.getId())
                    .with(csrf())
                    .contentType("application/merge-patch+json")
                    .content(TestUtil.convertObjectToJsonBytes(partialUpdatedStateExploitation))
            )
            .andExpect(status().isOk());

        // Validate the StateExploitation in the database
        List<StateExploitation> stateExploitationList = stateExploitationRepository.findAll();
        assertThat(stateExploitationList).hasSize(databaseSizeBeforeUpdate);
        StateExploitation testStateExploitation = stateExploitationList.get(stateExploitationList.size() - 1);
        assertThat(testStateExploitation.getName()).isEqualTo(UPDATED_NAME);
    }

    @Test
    @Transactional
    void patchNonExistingStateExploitation() throws Exception {
        int databaseSizeBeforeUpdate = stateExploitationRepository.findAll().size();
        stateExploitation.setId(count.incrementAndGet());

        // Create the StateExploitation
        StateExploitationDTO stateExploitationDTO = stateExploitationMapper.toDto(stateExploitation);

        // If the entity doesn't have an ID, it will throw BadRequestAlertException
        restStateExploitationMockMvc
            .perform(
                patch(ENTITY_API_URL_ID, stateExploitationDTO.getId())
                    .with(csrf())
                    .contentType("application/merge-patch+json")
                    .content(TestUtil.convertObjectToJsonBytes(stateExploitationDTO))
            )
            .andExpect(status().isBadRequest());

        // Validate the StateExploitation in the database
        List<StateExploitation> stateExploitationList = stateExploitationRepository.findAll();
        assertThat(stateExploitationList).hasSize(databaseSizeBeforeUpdate);
    }

    @Test
    @Transactional
    void patchWithIdMismatchStateExploitation() throws Exception {
        int databaseSizeBeforeUpdate = stateExploitationRepository.findAll().size();
        stateExploitation.setId(count.incrementAndGet());

        // Create the StateExploitation
        StateExploitationDTO stateExploitationDTO = stateExploitationMapper.toDto(stateExploitation);

        // If url ID doesn't match entity ID, it will throw BadRequestAlertException
        restStateExploitationMockMvc
            .perform(
                patch(ENTITY_API_URL_ID, count.incrementAndGet())
                    .with(csrf())
                    .contentType("application/merge-patch+json")
                    .content(TestUtil.convertObjectToJsonBytes(stateExploitationDTO))
            )
            .andExpect(status().isBadRequest());

        // Validate the StateExploitation in the database
        List<StateExploitation> stateExploitationList = stateExploitationRepository.findAll();
        assertThat(stateExploitationList).hasSize(databaseSizeBeforeUpdate);
    }

    @Test
    @Transactional
    void patchWithMissingIdPathParamStateExploitation() throws Exception {
        int databaseSizeBeforeUpdate = stateExploitationRepository.findAll().size();
        stateExploitation.setId(count.incrementAndGet());

        // Create the StateExploitation
        StateExploitationDTO stateExploitationDTO = stateExploitationMapper.toDto(stateExploitation);

        // If url ID doesn't match entity ID, it will throw BadRequestAlertException
        restStateExploitationMockMvc
            .perform(
                patch(ENTITY_API_URL)
                    .with(csrf())
                    .contentType("application/merge-patch+json")
                    .content(TestUtil.convertObjectToJsonBytes(stateExploitationDTO))
            )
            .andExpect(status().isMethodNotAllowed());

        // Validate the StateExploitation in the database
        List<StateExploitation> stateExploitationList = stateExploitationRepository.findAll();
        assertThat(stateExploitationList).hasSize(databaseSizeBeforeUpdate);
    }

    @Test
    @Transactional
    void deleteStateExploitation() throws Exception {
        // Initialize the database
        stateExploitationRepository.saveAndFlush(stateExploitation);

        int databaseSizeBeforeDelete = stateExploitationRepository.findAll().size();

        // Delete the stateExploitation
        restStateExploitationMockMvc
            .perform(delete(ENTITY_API_URL_ID, stateExploitation.getId()).with(csrf()).accept(MediaType.APPLICATION_JSON))
            .andExpect(status().isNoContent());

        // Validate the database contains one less item
        List<StateExploitation> stateExploitationList = stateExploitationRepository.findAll();
        assertThat(stateExploitationList).hasSize(databaseSizeBeforeDelete - 1);
    }
}
