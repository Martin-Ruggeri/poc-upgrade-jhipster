package com.pae.well.web.rest;

import static com.pae.well.web.rest.TestUtil.sameInstant;
import static org.assertj.core.api.Assertions.assertThat;
import static org.hamcrest.Matchers.hasItem;
import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.csrf;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

import com.pae.well.IntegrationTest;
import com.pae.well.domain.StateExploitation;
import com.pae.well.domain.Well;
import com.pae.well.domain.WellChangeStateExploitation;
import com.pae.well.repository.WellChangeStateExploitationRepository;
import com.pae.well.service.dto.WellChangeStateExploitationDTO;
import com.pae.well.service.mapper.WellChangeStateExploitationMapper;
import java.time.Instant;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.util.List;
import java.util.Random;
import java.util.concurrent.atomic.AtomicLong;
import javax.persistence.EntityManager;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.http.MediaType;
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.transaction.annotation.Transactional;

/**
 * Integration tests for the {@link WellChangeStateExploitationResource} REST controller.
 */
@IntegrationTest
@AutoConfigureMockMvc
@WithMockUser
class WellChangeStateExploitationResourceIT {

    private static final String DEFAULT_JUSTIFICATION = "AAAAAAAAAA";
    private static final String UPDATED_JUSTIFICATION = "BBBBBBBBBB";

    private static final ZonedDateTime DEFAULT_DATE = ZonedDateTime.ofInstant(Instant.ofEpochMilli(0L), ZoneOffset.UTC);
    private static final ZonedDateTime UPDATED_DATE = ZonedDateTime.now(ZoneId.systemDefault()).withNano(0);

    private static final String ENTITY_API_URL = "/api/well-change-state-exploitations";
    private static final String ENTITY_API_URL_ID = ENTITY_API_URL + "/{id}";

    private static Random random = new Random();
    private static AtomicLong count = new AtomicLong(random.nextInt() + (2 * Integer.MAX_VALUE));

    @Autowired
    private WellChangeStateExploitationRepository wellChangeStateExploitationRepository;

    @Autowired
    private WellChangeStateExploitationMapper wellChangeStateExploitationMapper;

    @Autowired
    private EntityManager em;

    @Autowired
    private MockMvc restWellChangeStateExploitationMockMvc;

    private WellChangeStateExploitation wellChangeStateExploitation;

    /**
     * Create an entity for this test.
     *
     * This is a static method, as tests for other entities might also need it,
     * if they test an entity which requires the current entity.
     */
    public static WellChangeStateExploitation createEntity(EntityManager em) {
        WellChangeStateExploitation wellChangeStateExploitation = new WellChangeStateExploitation()
            .justification(DEFAULT_JUSTIFICATION)
            .date(DEFAULT_DATE);
        // Add required entity
        Well well;
        if (TestUtil.findAll(em, Well.class).isEmpty()) {
            well = WellResourceIT.createEntity(em);
            em.persist(well);
            em.flush();
        } else {
            well = TestUtil.findAll(em, Well.class).get(0);
        }
        wellChangeStateExploitation.setWell(well);
        // Add required entity
        StateExploitation stateExploitation;
        if (TestUtil.findAll(em, StateExploitation.class).isEmpty()) {
            stateExploitation = StateExploitationResourceIT.createEntity(em);
            em.persist(stateExploitation);
            em.flush();
        } else {
            stateExploitation = TestUtil.findAll(em, StateExploitation.class).get(0);
        }
        wellChangeStateExploitation.setStateExploitation(stateExploitation);
        return wellChangeStateExploitation;
    }

    /**
     * Create an updated entity for this test.
     *
     * This is a static method, as tests for other entities might also need it,
     * if they test an entity which requires the current entity.
     */
    public static WellChangeStateExploitation createUpdatedEntity(EntityManager em) {
        WellChangeStateExploitation wellChangeStateExploitation = new WellChangeStateExploitation()
            .justification(UPDATED_JUSTIFICATION)
            .date(UPDATED_DATE);
        // Add required entity
        Well well;
        if (TestUtil.findAll(em, Well.class).isEmpty()) {
            well = WellResourceIT.createUpdatedEntity(em);
            em.persist(well);
            em.flush();
        } else {
            well = TestUtil.findAll(em, Well.class).get(0);
        }
        wellChangeStateExploitation.setWell(well);
        // Add required entity
        StateExploitation stateExploitation;
        if (TestUtil.findAll(em, StateExploitation.class).isEmpty()) {
            stateExploitation = StateExploitationResourceIT.createUpdatedEntity(em);
            em.persist(stateExploitation);
            em.flush();
        } else {
            stateExploitation = TestUtil.findAll(em, StateExploitation.class).get(0);
        }
        wellChangeStateExploitation.setStateExploitation(stateExploitation);
        return wellChangeStateExploitation;
    }

    @BeforeEach
    public void initTest() {
        wellChangeStateExploitation = createEntity(em);
    }

    @Test
    @Transactional
    void createWellChangeStateExploitation() throws Exception {
        int databaseSizeBeforeCreate = wellChangeStateExploitationRepository.findAll().size();
        // Create the WellChangeStateExploitation
        WellChangeStateExploitationDTO wellChangeStateExploitationDTO = wellChangeStateExploitationMapper.toDto(
            wellChangeStateExploitation
        );
        restWellChangeStateExploitationMockMvc
            .perform(
                post(ENTITY_API_URL)
                    .with(csrf())
                    .contentType(MediaType.APPLICATION_JSON)
                    .content(TestUtil.convertObjectToJsonBytes(wellChangeStateExploitationDTO))
            )
            .andExpect(status().isCreated());

        // Validate the WellChangeStateExploitation in the database
        List<WellChangeStateExploitation> wellChangeStateExploitationList = wellChangeStateExploitationRepository.findAll();
        assertThat(wellChangeStateExploitationList).hasSize(databaseSizeBeforeCreate + 1);
        WellChangeStateExploitation testWellChangeStateExploitation = wellChangeStateExploitationList.get(
            wellChangeStateExploitationList.size() - 1
        );
        assertThat(testWellChangeStateExploitation.getJustification()).isEqualTo(DEFAULT_JUSTIFICATION);
        assertThat(testWellChangeStateExploitation.getDate()).isEqualTo(DEFAULT_DATE);
    }

    @Test
    @Transactional
    void createWellChangeStateExploitationWithExistingId() throws Exception {
        // Create the WellChangeStateExploitation with an existing ID
        wellChangeStateExploitation.setId(1L);
        WellChangeStateExploitationDTO wellChangeStateExploitationDTO = wellChangeStateExploitationMapper.toDto(
            wellChangeStateExploitation
        );

        int databaseSizeBeforeCreate = wellChangeStateExploitationRepository.findAll().size();

        // An entity with an existing ID cannot be created, so this API call must fail
        restWellChangeStateExploitationMockMvc
            .perform(
                post(ENTITY_API_URL)
                    .with(csrf())
                    .contentType(MediaType.APPLICATION_JSON)
                    .content(TestUtil.convertObjectToJsonBytes(wellChangeStateExploitationDTO))
            )
            .andExpect(status().isBadRequest());

        // Validate the WellChangeStateExploitation in the database
        List<WellChangeStateExploitation> wellChangeStateExploitationList = wellChangeStateExploitationRepository.findAll();
        assertThat(wellChangeStateExploitationList).hasSize(databaseSizeBeforeCreate);
    }

    @Test
    @Transactional
    void checkJustificationIsRequired() throws Exception {
        int databaseSizeBeforeTest = wellChangeStateExploitationRepository.findAll().size();
        // set the field null
        wellChangeStateExploitation.setJustification(null);

        // Create the WellChangeStateExploitation, which fails.
        WellChangeStateExploitationDTO wellChangeStateExploitationDTO = wellChangeStateExploitationMapper.toDto(
            wellChangeStateExploitation
        );

        restWellChangeStateExploitationMockMvc
            .perform(
                post(ENTITY_API_URL)
                    .with(csrf())
                    .contentType(MediaType.APPLICATION_JSON)
                    .content(TestUtil.convertObjectToJsonBytes(wellChangeStateExploitationDTO))
            )
            .andExpect(status().isBadRequest());

        List<WellChangeStateExploitation> wellChangeStateExploitationList = wellChangeStateExploitationRepository.findAll();
        assertThat(wellChangeStateExploitationList).hasSize(databaseSizeBeforeTest);
    }

    @Test
    @Transactional
    void checkDateIsRequired() throws Exception {
        int databaseSizeBeforeTest = wellChangeStateExploitationRepository.findAll().size();
        // set the field null
        wellChangeStateExploitation.setDate(null);

        // Create the WellChangeStateExploitation, which fails.
        WellChangeStateExploitationDTO wellChangeStateExploitationDTO = wellChangeStateExploitationMapper.toDto(
            wellChangeStateExploitation
        );

        restWellChangeStateExploitationMockMvc
            .perform(
                post(ENTITY_API_URL)
                    .with(csrf())
                    .contentType(MediaType.APPLICATION_JSON)
                    .content(TestUtil.convertObjectToJsonBytes(wellChangeStateExploitationDTO))
            )
            .andExpect(status().isBadRequest());

        List<WellChangeStateExploitation> wellChangeStateExploitationList = wellChangeStateExploitationRepository.findAll();
        assertThat(wellChangeStateExploitationList).hasSize(databaseSizeBeforeTest);
    }

    @Test
    @Transactional
    void getAllWellChangeStateExploitations() throws Exception {
        // Initialize the database
        wellChangeStateExploitationRepository.saveAndFlush(wellChangeStateExploitation);

        // Get all the wellChangeStateExploitationList
        restWellChangeStateExploitationMockMvc
            .perform(get(ENTITY_API_URL + "?sort=id,desc"))
            .andExpect(status().isOk())
            .andExpect(content().contentType(MediaType.APPLICATION_JSON_VALUE))
            .andExpect(jsonPath("$.[*].id").value(hasItem(wellChangeStateExploitation.getId().intValue())))
            .andExpect(jsonPath("$.[*].justification").value(hasItem(DEFAULT_JUSTIFICATION)))
            .andExpect(jsonPath("$.[*].date").value(hasItem(sameInstant(DEFAULT_DATE))));
    }

    @Test
    @Transactional
    void getWellChangeStateExploitation() throws Exception {
        // Initialize the database
        wellChangeStateExploitationRepository.saveAndFlush(wellChangeStateExploitation);

        // Get the wellChangeStateExploitation
        restWellChangeStateExploitationMockMvc
            .perform(get(ENTITY_API_URL_ID, wellChangeStateExploitation.getId()))
            .andExpect(status().isOk())
            .andExpect(content().contentType(MediaType.APPLICATION_JSON_VALUE))
            .andExpect(jsonPath("$.id").value(wellChangeStateExploitation.getId().intValue()))
            .andExpect(jsonPath("$.justification").value(DEFAULT_JUSTIFICATION))
            .andExpect(jsonPath("$.date").value(sameInstant(DEFAULT_DATE)));
    }

    @Test
    @Transactional
    void getNonExistingWellChangeStateExploitation() throws Exception {
        // Get the wellChangeStateExploitation
        restWellChangeStateExploitationMockMvc.perform(get(ENTITY_API_URL_ID, Long.MAX_VALUE)).andExpect(status().isNotFound());
    }

    @Test
    @Transactional
    void putNewWellChangeStateExploitation() throws Exception {
        // Initialize the database
        wellChangeStateExploitationRepository.saveAndFlush(wellChangeStateExploitation);

        int databaseSizeBeforeUpdate = wellChangeStateExploitationRepository.findAll().size();

        // Update the wellChangeStateExploitation
        WellChangeStateExploitation updatedWellChangeStateExploitation = wellChangeStateExploitationRepository
            .findById(wellChangeStateExploitation.getId())
            .get();
        // Disconnect from session so that the updates on updatedWellChangeStateExploitation are not directly saved in db
        em.detach(updatedWellChangeStateExploitation);
        updatedWellChangeStateExploitation.justification(UPDATED_JUSTIFICATION).date(UPDATED_DATE);
        WellChangeStateExploitationDTO wellChangeStateExploitationDTO = wellChangeStateExploitationMapper.toDto(
            updatedWellChangeStateExploitation
        );

        restWellChangeStateExploitationMockMvc
            .perform(
                put(ENTITY_API_URL_ID, wellChangeStateExploitationDTO.getId())
                    .with(csrf())
                    .contentType(MediaType.APPLICATION_JSON)
                    .content(TestUtil.convertObjectToJsonBytes(wellChangeStateExploitationDTO))
            )
            .andExpect(status().isOk());

        // Validate the WellChangeStateExploitation in the database
        List<WellChangeStateExploitation> wellChangeStateExploitationList = wellChangeStateExploitationRepository.findAll();
        assertThat(wellChangeStateExploitationList).hasSize(databaseSizeBeforeUpdate);
        WellChangeStateExploitation testWellChangeStateExploitation = wellChangeStateExploitationList.get(
            wellChangeStateExploitationList.size() - 1
        );
        assertThat(testWellChangeStateExploitation.getJustification()).isEqualTo(UPDATED_JUSTIFICATION);
        assertThat(testWellChangeStateExploitation.getDate()).isEqualTo(UPDATED_DATE);
    }

    @Test
    @Transactional
    void putNonExistingWellChangeStateExploitation() throws Exception {
        int databaseSizeBeforeUpdate = wellChangeStateExploitationRepository.findAll().size();
        wellChangeStateExploitation.setId(count.incrementAndGet());

        // Create the WellChangeStateExploitation
        WellChangeStateExploitationDTO wellChangeStateExploitationDTO = wellChangeStateExploitationMapper.toDto(
            wellChangeStateExploitation
        );

        // If the entity doesn't have an ID, it will throw BadRequestAlertException
        restWellChangeStateExploitationMockMvc
            .perform(
                put(ENTITY_API_URL_ID, wellChangeStateExploitationDTO.getId())
                    .with(csrf())
                    .contentType(MediaType.APPLICATION_JSON)
                    .content(TestUtil.convertObjectToJsonBytes(wellChangeStateExploitationDTO))
            )
            .andExpect(status().isBadRequest());

        // Validate the WellChangeStateExploitation in the database
        List<WellChangeStateExploitation> wellChangeStateExploitationList = wellChangeStateExploitationRepository.findAll();
        assertThat(wellChangeStateExploitationList).hasSize(databaseSizeBeforeUpdate);
    }

    @Test
    @Transactional
    void putWithIdMismatchWellChangeStateExploitation() throws Exception {
        int databaseSizeBeforeUpdate = wellChangeStateExploitationRepository.findAll().size();
        wellChangeStateExploitation.setId(count.incrementAndGet());

        // Create the WellChangeStateExploitation
        WellChangeStateExploitationDTO wellChangeStateExploitationDTO = wellChangeStateExploitationMapper.toDto(
            wellChangeStateExploitation
        );

        // If url ID doesn't match entity ID, it will throw BadRequestAlertException
        restWellChangeStateExploitationMockMvc
            .perform(
                put(ENTITY_API_URL_ID, count.incrementAndGet())
                    .with(csrf())
                    .contentType(MediaType.APPLICATION_JSON)
                    .content(TestUtil.convertObjectToJsonBytes(wellChangeStateExploitationDTO))
            )
            .andExpect(status().isBadRequest());

        // Validate the WellChangeStateExploitation in the database
        List<WellChangeStateExploitation> wellChangeStateExploitationList = wellChangeStateExploitationRepository.findAll();
        assertThat(wellChangeStateExploitationList).hasSize(databaseSizeBeforeUpdate);
    }

    @Test
    @Transactional
    void putWithMissingIdPathParamWellChangeStateExploitation() throws Exception {
        int databaseSizeBeforeUpdate = wellChangeStateExploitationRepository.findAll().size();
        wellChangeStateExploitation.setId(count.incrementAndGet());

        // Create the WellChangeStateExploitation
        WellChangeStateExploitationDTO wellChangeStateExploitationDTO = wellChangeStateExploitationMapper.toDto(
            wellChangeStateExploitation
        );

        // If url ID doesn't match entity ID, it will throw BadRequestAlertException
        restWellChangeStateExploitationMockMvc
            .perform(
                put(ENTITY_API_URL)
                    .with(csrf())
                    .contentType(MediaType.APPLICATION_JSON)
                    .content(TestUtil.convertObjectToJsonBytes(wellChangeStateExploitationDTO))
            )
            .andExpect(status().isMethodNotAllowed());

        // Validate the WellChangeStateExploitation in the database
        List<WellChangeStateExploitation> wellChangeStateExploitationList = wellChangeStateExploitationRepository.findAll();
        assertThat(wellChangeStateExploitationList).hasSize(databaseSizeBeforeUpdate);
    }

    @Test
    @Transactional
    void partialUpdateWellChangeStateExploitationWithPatch() throws Exception {
        // Initialize the database
        wellChangeStateExploitationRepository.saveAndFlush(wellChangeStateExploitation);

        int databaseSizeBeforeUpdate = wellChangeStateExploitationRepository.findAll().size();

        // Update the wellChangeStateExploitation using partial update
        WellChangeStateExploitation partialUpdatedWellChangeStateExploitation = new WellChangeStateExploitation();
        partialUpdatedWellChangeStateExploitation.setId(wellChangeStateExploitation.getId());

        partialUpdatedWellChangeStateExploitation.justification(UPDATED_JUSTIFICATION);

        restWellChangeStateExploitationMockMvc
            .perform(
                patch(ENTITY_API_URL_ID, partialUpdatedWellChangeStateExploitation.getId())
                    .with(csrf())
                    .contentType("application/merge-patch+json")
                    .content(TestUtil.convertObjectToJsonBytes(partialUpdatedWellChangeStateExploitation))
            )
            .andExpect(status().isOk());

        // Validate the WellChangeStateExploitation in the database
        List<WellChangeStateExploitation> wellChangeStateExploitationList = wellChangeStateExploitationRepository.findAll();
        assertThat(wellChangeStateExploitationList).hasSize(databaseSizeBeforeUpdate);
        WellChangeStateExploitation testWellChangeStateExploitation = wellChangeStateExploitationList.get(
            wellChangeStateExploitationList.size() - 1
        );
        assertThat(testWellChangeStateExploitation.getJustification()).isEqualTo(UPDATED_JUSTIFICATION);
        assertThat(testWellChangeStateExploitation.getDate()).isEqualTo(DEFAULT_DATE);
    }

    @Test
    @Transactional
    void fullUpdateWellChangeStateExploitationWithPatch() throws Exception {
        // Initialize the database
        wellChangeStateExploitationRepository.saveAndFlush(wellChangeStateExploitation);

        int databaseSizeBeforeUpdate = wellChangeStateExploitationRepository.findAll().size();

        // Update the wellChangeStateExploitation using partial update
        WellChangeStateExploitation partialUpdatedWellChangeStateExploitation = new WellChangeStateExploitation();
        partialUpdatedWellChangeStateExploitation.setId(wellChangeStateExploitation.getId());

        partialUpdatedWellChangeStateExploitation.justification(UPDATED_JUSTIFICATION).date(UPDATED_DATE);

        restWellChangeStateExploitationMockMvc
            .perform(
                patch(ENTITY_API_URL_ID, partialUpdatedWellChangeStateExploitation.getId())
                    .with(csrf())
                    .contentType("application/merge-patch+json")
                    .content(TestUtil.convertObjectToJsonBytes(partialUpdatedWellChangeStateExploitation))
            )
            .andExpect(status().isOk());

        // Validate the WellChangeStateExploitation in the database
        List<WellChangeStateExploitation> wellChangeStateExploitationList = wellChangeStateExploitationRepository.findAll();
        assertThat(wellChangeStateExploitationList).hasSize(databaseSizeBeforeUpdate);
        WellChangeStateExploitation testWellChangeStateExploitation = wellChangeStateExploitationList.get(
            wellChangeStateExploitationList.size() - 1
        );
        assertThat(testWellChangeStateExploitation.getJustification()).isEqualTo(UPDATED_JUSTIFICATION);
        assertThat(testWellChangeStateExploitation.getDate()).isEqualTo(UPDATED_DATE);
    }

    @Test
    @Transactional
    void patchNonExistingWellChangeStateExploitation() throws Exception {
        int databaseSizeBeforeUpdate = wellChangeStateExploitationRepository.findAll().size();
        wellChangeStateExploitation.setId(count.incrementAndGet());

        // Create the WellChangeStateExploitation
        WellChangeStateExploitationDTO wellChangeStateExploitationDTO = wellChangeStateExploitationMapper.toDto(
            wellChangeStateExploitation
        );

        // If the entity doesn't have an ID, it will throw BadRequestAlertException
        restWellChangeStateExploitationMockMvc
            .perform(
                patch(ENTITY_API_URL_ID, wellChangeStateExploitationDTO.getId())
                    .with(csrf())
                    .contentType("application/merge-patch+json")
                    .content(TestUtil.convertObjectToJsonBytes(wellChangeStateExploitationDTO))
            )
            .andExpect(status().isBadRequest());

        // Validate the WellChangeStateExploitation in the database
        List<WellChangeStateExploitation> wellChangeStateExploitationList = wellChangeStateExploitationRepository.findAll();
        assertThat(wellChangeStateExploitationList).hasSize(databaseSizeBeforeUpdate);
    }

    @Test
    @Transactional
    void patchWithIdMismatchWellChangeStateExploitation() throws Exception {
        int databaseSizeBeforeUpdate = wellChangeStateExploitationRepository.findAll().size();
        wellChangeStateExploitation.setId(count.incrementAndGet());

        // Create the WellChangeStateExploitation
        WellChangeStateExploitationDTO wellChangeStateExploitationDTO = wellChangeStateExploitationMapper.toDto(
            wellChangeStateExploitation
        );

        // If url ID doesn't match entity ID, it will throw BadRequestAlertException
        restWellChangeStateExploitationMockMvc
            .perform(
                patch(ENTITY_API_URL_ID, count.incrementAndGet())
                    .with(csrf())
                    .contentType("application/merge-patch+json")
                    .content(TestUtil.convertObjectToJsonBytes(wellChangeStateExploitationDTO))
            )
            .andExpect(status().isBadRequest());

        // Validate the WellChangeStateExploitation in the database
        List<WellChangeStateExploitation> wellChangeStateExploitationList = wellChangeStateExploitationRepository.findAll();
        assertThat(wellChangeStateExploitationList).hasSize(databaseSizeBeforeUpdate);
    }

    @Test
    @Transactional
    void patchWithMissingIdPathParamWellChangeStateExploitation() throws Exception {
        int databaseSizeBeforeUpdate = wellChangeStateExploitationRepository.findAll().size();
        wellChangeStateExploitation.setId(count.incrementAndGet());

        // Create the WellChangeStateExploitation
        WellChangeStateExploitationDTO wellChangeStateExploitationDTO = wellChangeStateExploitationMapper.toDto(
            wellChangeStateExploitation
        );

        // If url ID doesn't match entity ID, it will throw BadRequestAlertException
        restWellChangeStateExploitationMockMvc
            .perform(
                patch(ENTITY_API_URL)
                    .with(csrf())
                    .contentType("application/merge-patch+json")
                    .content(TestUtil.convertObjectToJsonBytes(wellChangeStateExploitationDTO))
            )
            .andExpect(status().isMethodNotAllowed());

        // Validate the WellChangeStateExploitation in the database
        List<WellChangeStateExploitation> wellChangeStateExploitationList = wellChangeStateExploitationRepository.findAll();
        assertThat(wellChangeStateExploitationList).hasSize(databaseSizeBeforeUpdate);
    }

    @Test
    @Transactional
    void deleteWellChangeStateExploitation() throws Exception {
        // Initialize the database
        wellChangeStateExploitationRepository.saveAndFlush(wellChangeStateExploitation);

        int databaseSizeBeforeDelete = wellChangeStateExploitationRepository.findAll().size();

        // Delete the wellChangeStateExploitation
        restWellChangeStateExploitationMockMvc
            .perform(delete(ENTITY_API_URL_ID, wellChangeStateExploitation.getId()).with(csrf()).accept(MediaType.APPLICATION_JSON))
            .andExpect(status().isNoContent());

        // Validate the database contains one less item
        List<WellChangeStateExploitation> wellChangeStateExploitationList = wellChangeStateExploitationRepository.findAll();
        assertThat(wellChangeStateExploitationList).hasSize(databaseSizeBeforeDelete - 1);
    }
}
