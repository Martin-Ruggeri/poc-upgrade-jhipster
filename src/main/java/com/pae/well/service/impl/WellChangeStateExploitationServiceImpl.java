package com.pae.well.service.impl;

import com.pae.well.domain.WellChangeStateExploitation;
import com.pae.well.repository.WellChangeStateExploitationRepository;
import com.pae.well.service.WellChangeStateExploitationService;
import com.pae.well.service.dto.WellChangeStateExploitationDTO;
import com.pae.well.service.mapper.WellChangeStateExploitationMapper;
import java.util.Optional;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

/**
 * Service Implementation for managing {@link WellChangeStateExploitation}.
 */
@Service
@Transactional
public class WellChangeStateExploitationServiceImpl implements WellChangeStateExploitationService {

    private final Logger log = LoggerFactory.getLogger(WellChangeStateExploitationServiceImpl.class);

    private final WellChangeStateExploitationRepository wellChangeStateExploitationRepository;

    private final WellChangeStateExploitationMapper wellChangeStateExploitationMapper;

    public WellChangeStateExploitationServiceImpl(
        WellChangeStateExploitationRepository wellChangeStateExploitationRepository,
        WellChangeStateExploitationMapper wellChangeStateExploitationMapper
    ) {
        this.wellChangeStateExploitationRepository = wellChangeStateExploitationRepository;
        this.wellChangeStateExploitationMapper = wellChangeStateExploitationMapper;
    }

    @Override
    public WellChangeStateExploitationDTO save(WellChangeStateExploitationDTO wellChangeStateExploitationDTO) {
        log.debug("Request to save WellChangeStateExploitation : {}", wellChangeStateExploitationDTO);
        WellChangeStateExploitation wellChangeStateExploitation = wellChangeStateExploitationMapper.toEntity(
            wellChangeStateExploitationDTO
        );
        wellChangeStateExploitation = wellChangeStateExploitationRepository.save(wellChangeStateExploitation);
        return wellChangeStateExploitationMapper.toDto(wellChangeStateExploitation);
    }

    @Override
    public WellChangeStateExploitationDTO update(WellChangeStateExploitationDTO wellChangeStateExploitationDTO) {
        log.debug("Request to save WellChangeStateExploitation : {}", wellChangeStateExploitationDTO);
        WellChangeStateExploitation wellChangeStateExploitation = wellChangeStateExploitationMapper.toEntity(
            wellChangeStateExploitationDTO
        );
        wellChangeStateExploitation = wellChangeStateExploitationRepository.save(wellChangeStateExploitation);
        return wellChangeStateExploitationMapper.toDto(wellChangeStateExploitation);
    }

    @Override
    public Optional<WellChangeStateExploitationDTO> partialUpdate(WellChangeStateExploitationDTO wellChangeStateExploitationDTO) {
        log.debug("Request to partially update WellChangeStateExploitation : {}", wellChangeStateExploitationDTO);

        return wellChangeStateExploitationRepository
            .findById(wellChangeStateExploitationDTO.getId())
            .map(existingWellChangeStateExploitation -> {
                wellChangeStateExploitationMapper.partialUpdate(existingWellChangeStateExploitation, wellChangeStateExploitationDTO);

                return existingWellChangeStateExploitation;
            })
            .map(wellChangeStateExploitationRepository::save)
            .map(wellChangeStateExploitationMapper::toDto);
    }

    @Override
    @Transactional(readOnly = true)
    public Page<WellChangeStateExploitationDTO> findAll(Pageable pageable) {
        log.debug("Request to get all WellChangeStateExploitations");
        return wellChangeStateExploitationRepository.findAll(pageable).map(wellChangeStateExploitationMapper::toDto);
    }

    @Override
    @Transactional(readOnly = true)
    public Optional<WellChangeStateExploitationDTO> findOne(Long id) {
        log.debug("Request to get WellChangeStateExploitation : {}", id);
        return wellChangeStateExploitationRepository.findById(id).map(wellChangeStateExploitationMapper::toDto);
    }

    @Override
    public void delete(Long id) {
        log.debug("Request to delete WellChangeStateExploitation : {}", id);
        wellChangeStateExploitationRepository.deleteById(id);
    }
}
