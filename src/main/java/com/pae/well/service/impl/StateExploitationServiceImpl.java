package com.pae.well.service.impl;

import com.pae.well.domain.StateExploitation;
import com.pae.well.repository.StateExploitationRepository;
import com.pae.well.service.StateExploitationService;
import com.pae.well.service.dto.StateExploitationDTO;
import com.pae.well.service.mapper.StateExploitationMapper;
import java.util.LinkedList;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

/**
 * Service Implementation for managing {@link StateExploitation}.
 */
@Service
@Transactional
public class StateExploitationServiceImpl implements StateExploitationService {

    private final Logger log = LoggerFactory.getLogger(StateExploitationServiceImpl.class);

    private final StateExploitationRepository stateExploitationRepository;

    private final StateExploitationMapper stateExploitationMapper;

    public StateExploitationServiceImpl(
        StateExploitationRepository stateExploitationRepository,
        StateExploitationMapper stateExploitationMapper
    ) {
        this.stateExploitationRepository = stateExploitationRepository;
        this.stateExploitationMapper = stateExploitationMapper;
    }

    @Override
    public StateExploitationDTO save(StateExploitationDTO stateExploitationDTO) {
        log.debug("Request to save StateExploitation : {}", stateExploitationDTO);
        StateExploitation stateExploitation = stateExploitationMapper.toEntity(stateExploitationDTO);
        stateExploitation = stateExploitationRepository.save(stateExploitation);
        return stateExploitationMapper.toDto(stateExploitation);
    }

    @Override
    public StateExploitationDTO update(StateExploitationDTO stateExploitationDTO) {
        log.debug("Request to save StateExploitation : {}", stateExploitationDTO);
        StateExploitation stateExploitation = stateExploitationMapper.toEntity(stateExploitationDTO);
        stateExploitation = stateExploitationRepository.save(stateExploitation);
        return stateExploitationMapper.toDto(stateExploitation);
    }

    @Override
    public Optional<StateExploitationDTO> partialUpdate(StateExploitationDTO stateExploitationDTO) {
        log.debug("Request to partially update StateExploitation : {}", stateExploitationDTO);

        return stateExploitationRepository
            .findById(stateExploitationDTO.getId())
            .map(existingStateExploitation -> {
                stateExploitationMapper.partialUpdate(existingStateExploitation, stateExploitationDTO);

                return existingStateExploitation;
            })
            .map(stateExploitationRepository::save)
            .map(stateExploitationMapper::toDto);
    }

    @Override
    @Transactional(readOnly = true)
    public List<StateExploitationDTO> findAll() {
        log.debug("Request to get all StateExploitations");
        return stateExploitationRepository
            .findAll()
            .stream()
            .map(stateExploitationMapper::toDto)
            .collect(Collectors.toCollection(LinkedList::new));
    }

    @Override
    @Transactional(readOnly = true)
    public Optional<StateExploitationDTO> findOne(Long id) {
        log.debug("Request to get StateExploitation : {}", id);
        return stateExploitationRepository.findById(id).map(stateExploitationMapper::toDto);
    }

    @Override
    public void delete(Long id) {
        log.debug("Request to delete StateExploitation : {}", id);
        stateExploitationRepository.deleteById(id);
    }
}
