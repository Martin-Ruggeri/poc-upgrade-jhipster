package com.pae.well.web.rest;

import com.pae.well.repository.WellChangeStateExploitationRepository;
import com.pae.well.service.WellChangeStateExploitationService;
import com.pae.well.service.dto.WellChangeStateExploitationDTO;
import com.pae.well.web.rest.errors.BadRequestAlertException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;
import tech.jhipster.web.util.HeaderUtil;
import tech.jhipster.web.util.PaginationUtil;
import tech.jhipster.web.util.ResponseUtil;

/**
 * REST controller for managing {@link com.pae.well.domain.WellChangeStateExploitation}.
 */
@RestController
@RequestMapping("/api")
public class WellChangeStateExploitationResource {

    private final Logger log = LoggerFactory.getLogger(WellChangeStateExploitationResource.class);

    private static final String ENTITY_NAME = "wellWellChangeStateExploitation";

    @Value("${jhipster.clientApp.name}")
    private String applicationName;

    private final WellChangeStateExploitationService wellChangeStateExploitationService;

    private final WellChangeStateExploitationRepository wellChangeStateExploitationRepository;

    public WellChangeStateExploitationResource(
        WellChangeStateExploitationService wellChangeStateExploitationService,
        WellChangeStateExploitationRepository wellChangeStateExploitationRepository
    ) {
        this.wellChangeStateExploitationService = wellChangeStateExploitationService;
        this.wellChangeStateExploitationRepository = wellChangeStateExploitationRepository;
    }

    /**
     * {@code POST  /well-change-state-exploitations} : Create a new wellChangeStateExploitation.
     *
     * @param wellChangeStateExploitationDTO the wellChangeStateExploitationDTO to create.
     * @return the {@link ResponseEntity} with status {@code 201 (Created)} and with body the new wellChangeStateExploitationDTO, or with status {@code 400 (Bad Request)} if the wellChangeStateExploitation has already an ID.
     * @throws URISyntaxException if the Location URI syntax is incorrect.
     */
    @PostMapping("/well-change-state-exploitations")
    public ResponseEntity<WellChangeStateExploitationDTO> createWellChangeStateExploitation(
        @Valid @RequestBody WellChangeStateExploitationDTO wellChangeStateExploitationDTO
    ) throws URISyntaxException {
        log.debug("REST request to save WellChangeStateExploitation : {}", wellChangeStateExploitationDTO);
        if (wellChangeStateExploitationDTO.getId() != null) {
            throw new BadRequestAlertException("A new wellChangeStateExploitation cannot already have an ID", ENTITY_NAME, "idexists");
        }
        WellChangeStateExploitationDTO result = wellChangeStateExploitationService.save(wellChangeStateExploitationDTO);
        return ResponseEntity
            .created(new URI("/api/well-change-state-exploitations/" + result.getId()))
            .headers(HeaderUtil.createEntityCreationAlert(applicationName, true, ENTITY_NAME, result.getId().toString()))
            .body(result);
    }

    /**
     * {@code PUT  /well-change-state-exploitations/:id} : Updates an existing wellChangeStateExploitation.
     *
     * @param id the id of the wellChangeStateExploitationDTO to save.
     * @param wellChangeStateExploitationDTO the wellChangeStateExploitationDTO to update.
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the updated wellChangeStateExploitationDTO,
     * or with status {@code 400 (Bad Request)} if the wellChangeStateExploitationDTO is not valid,
     * or with status {@code 500 (Internal Server Error)} if the wellChangeStateExploitationDTO couldn't be updated.
     * @throws URISyntaxException if the Location URI syntax is incorrect.
     */
    @PutMapping("/well-change-state-exploitations/{id}")
    public ResponseEntity<WellChangeStateExploitationDTO> updateWellChangeStateExploitation(
        @PathVariable(value = "id", required = false) final Long id,
        @Valid @RequestBody WellChangeStateExploitationDTO wellChangeStateExploitationDTO
    ) throws URISyntaxException {
        log.debug("REST request to update WellChangeStateExploitation : {}, {}", id, wellChangeStateExploitationDTO);
        if (wellChangeStateExploitationDTO.getId() == null) {
            throw new BadRequestAlertException("Invalid id", ENTITY_NAME, "idnull");
        }
        if (!Objects.equals(id, wellChangeStateExploitationDTO.getId())) {
            throw new BadRequestAlertException("Invalid ID", ENTITY_NAME, "idinvalid");
        }

        if (!wellChangeStateExploitationRepository.existsById(id)) {
            throw new BadRequestAlertException("Entity not found", ENTITY_NAME, "idnotfound");
        }

        WellChangeStateExploitationDTO result = wellChangeStateExploitationService.update(wellChangeStateExploitationDTO);
        return ResponseEntity
            .ok()
            .headers(
                HeaderUtil.createEntityUpdateAlert(applicationName, true, ENTITY_NAME, wellChangeStateExploitationDTO.getId().toString())
            )
            .body(result);
    }

    /**
     * {@code PATCH  /well-change-state-exploitations/:id} : Partial updates given fields of an existing wellChangeStateExploitation, field will ignore if it is null
     *
     * @param id the id of the wellChangeStateExploitationDTO to save.
     * @param wellChangeStateExploitationDTO the wellChangeStateExploitationDTO to update.
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the updated wellChangeStateExploitationDTO,
     * or with status {@code 400 (Bad Request)} if the wellChangeStateExploitationDTO is not valid,
     * or with status {@code 404 (Not Found)} if the wellChangeStateExploitationDTO is not found,
     * or with status {@code 500 (Internal Server Error)} if the wellChangeStateExploitationDTO couldn't be updated.
     * @throws URISyntaxException if the Location URI syntax is incorrect.
     */
    @PatchMapping(value = "/well-change-state-exploitations/{id}", consumes = { "application/json", "application/merge-patch+json" })
    public ResponseEntity<WellChangeStateExploitationDTO> partialUpdateWellChangeStateExploitation(
        @PathVariable(value = "id", required = false) final Long id,
        @NotNull @RequestBody WellChangeStateExploitationDTO wellChangeStateExploitationDTO
    ) throws URISyntaxException {
        log.debug("REST request to partial update WellChangeStateExploitation partially : {}, {}", id, wellChangeStateExploitationDTO);
        if (wellChangeStateExploitationDTO.getId() == null) {
            throw new BadRequestAlertException("Invalid id", ENTITY_NAME, "idnull");
        }
        if (!Objects.equals(id, wellChangeStateExploitationDTO.getId())) {
            throw new BadRequestAlertException("Invalid ID", ENTITY_NAME, "idinvalid");
        }

        if (!wellChangeStateExploitationRepository.existsById(id)) {
            throw new BadRequestAlertException("Entity not found", ENTITY_NAME, "idnotfound");
        }

        Optional<WellChangeStateExploitationDTO> result = wellChangeStateExploitationService.partialUpdate(wellChangeStateExploitationDTO);

        return ResponseUtil.wrapOrNotFound(
            result,
            HeaderUtil.createEntityUpdateAlert(applicationName, true, ENTITY_NAME, wellChangeStateExploitationDTO.getId().toString())
        );
    }

    /**
     * {@code GET  /well-change-state-exploitations} : get all the wellChangeStateExploitations.
     *
     * @param pageable the pagination information.
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and the list of wellChangeStateExploitations in body.
     */
    @GetMapping("/well-change-state-exploitations")
    public ResponseEntity<List<WellChangeStateExploitationDTO>> getAllWellChangeStateExploitations(
        @org.springdoc.api.annotations.ParameterObject Pageable pageable
    ) {
        log.debug("REST request to get a page of WellChangeStateExploitations");
        Page<WellChangeStateExploitationDTO> page = wellChangeStateExploitationService.findAll(pageable);
        HttpHeaders headers = PaginationUtil.generatePaginationHttpHeaders(ServletUriComponentsBuilder.fromCurrentRequest(), page);
        return ResponseEntity.ok().headers(headers).body(page.getContent());
    }

    /**
     * {@code GET  /well-change-state-exploitations/:id} : get the "id" wellChangeStateExploitation.
     *
     * @param id the id of the wellChangeStateExploitationDTO to retrieve.
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the wellChangeStateExploitationDTO, or with status {@code 404 (Not Found)}.
     */
    @GetMapping("/well-change-state-exploitations/{id}")
    public ResponseEntity<WellChangeStateExploitationDTO> getWellChangeStateExploitation(@PathVariable Long id) {
        log.debug("REST request to get WellChangeStateExploitation : {}", id);
        Optional<WellChangeStateExploitationDTO> wellChangeStateExploitationDTO = wellChangeStateExploitationService.findOne(id);
        return ResponseUtil.wrapOrNotFound(wellChangeStateExploitationDTO);
    }

    /**
     * {@code DELETE  /well-change-state-exploitations/:id} : delete the "id" wellChangeStateExploitation.
     *
     * @param id the id of the wellChangeStateExploitationDTO to delete.
     * @return the {@link ResponseEntity} with status {@code 204 (NO_CONTENT)}.
     */
    @DeleteMapping("/well-change-state-exploitations/{id}")
    public ResponseEntity<Void> deleteWellChangeStateExploitation(@PathVariable Long id) {
        log.debug("REST request to delete WellChangeStateExploitation : {}", id);
        wellChangeStateExploitationService.delete(id);
        return ResponseEntity
            .noContent()
            .headers(HeaderUtil.createEntityDeletionAlert(applicationName, true, ENTITY_NAME, id.toString()))
            .build();
    }
}
