package com.pae.well.web.rest;

import com.pae.well.repository.StateExploitationRepository;
import com.pae.well.service.StateExploitationService;
import com.pae.well.service.dto.StateExploitationDTO;
import com.pae.well.web.rest.errors.BadRequestAlertException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import tech.jhipster.web.util.HeaderUtil;
import tech.jhipster.web.util.ResponseUtil;

/**
 * REST controller for managing {@link com.pae.well.domain.StateExploitation}.
 */
@RestController
@RequestMapping("/api")
public class StateExploitationResource {

    private final Logger log = LoggerFactory.getLogger(StateExploitationResource.class);

    private static final String ENTITY_NAME = "wellStateExploitation";

    @Value("${jhipster.clientApp.name}")
    private String applicationName;

    private final StateExploitationService stateExploitationService;

    private final StateExploitationRepository stateExploitationRepository;

    public StateExploitationResource(
        StateExploitationService stateExploitationService,
        StateExploitationRepository stateExploitationRepository
    ) {
        this.stateExploitationService = stateExploitationService;
        this.stateExploitationRepository = stateExploitationRepository;
    }

    /**
     * {@code POST  /state-exploitations} : Create a new stateExploitation.
     *
     * @param stateExploitationDTO the stateExploitationDTO to create.
     * @return the {@link ResponseEntity} with status {@code 201 (Created)} and with body the new stateExploitationDTO, or with status {@code 400 (Bad Request)} if the stateExploitation has already an ID.
     * @throws URISyntaxException if the Location URI syntax is incorrect.
     */
    @PostMapping("/state-exploitations")
    public ResponseEntity<StateExploitationDTO> createStateExploitation(@Valid @RequestBody StateExploitationDTO stateExploitationDTO)
        throws URISyntaxException {
        log.debug("REST request to save StateExploitation : {}", stateExploitationDTO);
        if (stateExploitationDTO.getId() != null) {
            throw new BadRequestAlertException("A new stateExploitation cannot already have an ID", ENTITY_NAME, "idexists");
        }
        StateExploitationDTO result = stateExploitationService.save(stateExploitationDTO);
        return ResponseEntity
            .created(new URI("/api/state-exploitations/" + result.getId()))
            .headers(HeaderUtil.createEntityCreationAlert(applicationName, true, ENTITY_NAME, result.getId().toString()))
            .body(result);
    }

    /**
     * {@code PUT  /state-exploitations/:id} : Updates an existing stateExploitation.
     *
     * @param id the id of the stateExploitationDTO to save.
     * @param stateExploitationDTO the stateExploitationDTO to update.
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the updated stateExploitationDTO,
     * or with status {@code 400 (Bad Request)} if the stateExploitationDTO is not valid,
     * or with status {@code 500 (Internal Server Error)} if the stateExploitationDTO couldn't be updated.
     * @throws URISyntaxException if the Location URI syntax is incorrect.
     */
    @PutMapping("/state-exploitations/{id}")
    public ResponseEntity<StateExploitationDTO> updateStateExploitation(
        @PathVariable(value = "id", required = false) final Long id,
        @Valid @RequestBody StateExploitationDTO stateExploitationDTO
    ) throws URISyntaxException {
        log.debug("REST request to update StateExploitation : {}, {}", id, stateExploitationDTO);
        if (stateExploitationDTO.getId() == null) {
            throw new BadRequestAlertException("Invalid id", ENTITY_NAME, "idnull");
        }
        if (!Objects.equals(id, stateExploitationDTO.getId())) {
            throw new BadRequestAlertException("Invalid ID", ENTITY_NAME, "idinvalid");
        }

        if (!stateExploitationRepository.existsById(id)) {
            throw new BadRequestAlertException("Entity not found", ENTITY_NAME, "idnotfound");
        }

        StateExploitationDTO result = stateExploitationService.update(stateExploitationDTO);
        return ResponseEntity
            .ok()
            .headers(HeaderUtil.createEntityUpdateAlert(applicationName, true, ENTITY_NAME, stateExploitationDTO.getId().toString()))
            .body(result);
    }

    /**
     * {@code PATCH  /state-exploitations/:id} : Partial updates given fields of an existing stateExploitation, field will ignore if it is null
     *
     * @param id the id of the stateExploitationDTO to save.
     * @param stateExploitationDTO the stateExploitationDTO to update.
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the updated stateExploitationDTO,
     * or with status {@code 400 (Bad Request)} if the stateExploitationDTO is not valid,
     * or with status {@code 404 (Not Found)} if the stateExploitationDTO is not found,
     * or with status {@code 500 (Internal Server Error)} if the stateExploitationDTO couldn't be updated.
     * @throws URISyntaxException if the Location URI syntax is incorrect.
     */
    @PatchMapping(value = "/state-exploitations/{id}", consumes = { "application/json", "application/merge-patch+json" })
    public ResponseEntity<StateExploitationDTO> partialUpdateStateExploitation(
        @PathVariable(value = "id", required = false) final Long id,
        @NotNull @RequestBody StateExploitationDTO stateExploitationDTO
    ) throws URISyntaxException {
        log.debug("REST request to partial update StateExploitation partially : {}, {}", id, stateExploitationDTO);
        if (stateExploitationDTO.getId() == null) {
            throw new BadRequestAlertException("Invalid id", ENTITY_NAME, "idnull");
        }
        if (!Objects.equals(id, stateExploitationDTO.getId())) {
            throw new BadRequestAlertException("Invalid ID", ENTITY_NAME, "idinvalid");
        }

        if (!stateExploitationRepository.existsById(id)) {
            throw new BadRequestAlertException("Entity not found", ENTITY_NAME, "idnotfound");
        }

        Optional<StateExploitationDTO> result = stateExploitationService.partialUpdate(stateExploitationDTO);

        return ResponseUtil.wrapOrNotFound(
            result,
            HeaderUtil.createEntityUpdateAlert(applicationName, true, ENTITY_NAME, stateExploitationDTO.getId().toString())
        );
    }

    /**
     * {@code GET  /state-exploitations} : get all the stateExploitations.
     *
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and the list of stateExploitations in body.
     */
    @GetMapping("/state-exploitations")
    public List<StateExploitationDTO> getAllStateExploitations() {
        log.debug("REST request to get all StateExploitations");
        return stateExploitationService.findAll();
    }

    /**
     * {@code GET  /state-exploitations/:id} : get the "id" stateExploitation.
     *
     * @param id the id of the stateExploitationDTO to retrieve.
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the stateExploitationDTO, or with status {@code 404 (Not Found)}.
     */
    @GetMapping("/state-exploitations/{id}")
    public ResponseEntity<StateExploitationDTO> getStateExploitation(@PathVariable Long id) {
        log.debug("REST request to get StateExploitation : {}", id);
        Optional<StateExploitationDTO> stateExploitationDTO = stateExploitationService.findOne(id);
        return ResponseUtil.wrapOrNotFound(stateExploitationDTO);
    }

    /**
     * {@code DELETE  /state-exploitations/:id} : delete the "id" stateExploitation.
     *
     * @param id the id of the stateExploitationDTO to delete.
     * @return the {@link ResponseEntity} with status {@code 204 (NO_CONTENT)}.
     */
    @DeleteMapping("/state-exploitations/{id}")
    public ResponseEntity<Void> deleteStateExploitation(@PathVariable Long id) {
        log.debug("REST request to delete StateExploitation : {}", id);
        stateExploitationService.delete(id);
        return ResponseEntity
            .noContent()
            .headers(HeaderUtil.createEntityDeletionAlert(applicationName, true, ENTITY_NAME, id.toString()))
            .build();
    }
}
